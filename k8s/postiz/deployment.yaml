apiVersion: v1
kind: Namespace
metadata:
  name: postiz
---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postiz-db
  namespace: postiz
spec:
  instances: 1
  storage:
    storageClass: longhorn-backup
    size: 10Gi
  bootstrap:
    initdb:
      database: postiz-db
      owner: postiz-user
      secret:
        name: postiz-db-credentials
  backup:
    retentionPolicy: 30d
    barmanObjectStore:
      wal:
        compression: gzip
      data:
        compression: gzip
      endpointURL: "https://minio.wayl.one"
      destinationPath: "s3://postiz/db"
      s3Credentials:
        accessKeyId:
          name: postiz-minio-secret
          key: AWS_ACCESS_KEY_ID
        secretAccessKey:
          name: postiz-minio-secret
          key: AWS_SECRET_ACCESS_KEY
        region:
          name: postiz-minio-secret
          key: AWS_REGION
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: postiz-ingress
  namespace: postiz
spec:
  rules:
    - host: postiz.wayl.one
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: postiz
                port:
                  number: 5000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postiz
  namespace: postiz
spec:
  replicas: 1
  selector:
    matchLabels:
      service: postiz
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        service: postiz
      annotations:
        diun.enable: "true"
    spec:
      # todo change to readwrite many volumes
      # nodeSelector:
      #   kubernetes.io/hostname: falcon1
      containers:
        - name: postiz
          # image: ghcr.io/gitroomhq/postiz-app:v1.43.0
          image: ghcr.io/gitroomhq/postiz-app:v1.39.1
          ports:
            - containerPort: 5000
              protocol: TCP
          envFrom:
            - secretRef:
                name: postiz-secrets
          env:
            - name: API_LIMIT
              value: '10000'
            - name: BACKEND_INTERNAL_URL
              value: http://localhost:3000
            - name: MAIN_URL
              value: https://postiz.wayl.one
            - name: FRONTEND_URL
              value: https://postiz.wayl.one
            - name: IS_GENERAL
              value: "true"
            - name: POSTIZ_APPS
              value: 'frontend workers cron backend'
            - name: NEXT_PUBLIC_BACKEND_URL
              value: https://postiz.wayl.one/api
            - name: NEXT_PUBLIC_UPLOAD_DIRECTORY
              value: /uploads
            - name: REDIS_URL
              value: redis://postiz-redis.postiz.svc:6379
            - name: STORAGE_PROVIDER
              value: local
            - name: UPLOAD_DIRECTORY
              value: /uploads
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: postiz-db-credentials
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postiz-db-credentials
                  key: password
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: postiz-db-credentials
                  key: database
            - name: DATABASE_URL
              value: "postgresql://$(DB_USER):$(DB_PASSWORD)@postiz-db-rw.postiz.svc:5432/$(DB_NAME)"
          volumeMounts:
            - mountPath: /config
              name: postiz-config
            - mountPath: /uploads
              name: postiz-uploads
      volumes:
        - name: postiz-config
          persistentVolumeClaim:
            claimName: postiz-config
        - name: postiz-uploads
          persistentVolumeClaim:
            claimName: postiz-uploads
---
apiVersion: v1
kind: Service
metadata:
  name: postiz
  namespace: postiz
spec:
  ports:
    - name: "5000"
      port: 5000
      targetPort: 5000
  selector:
    service: postiz
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postiz-config
  namespace: postiz
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn-backup
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postiz-uploads
  namespace: postiz
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn-backup
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: postiz-redis
  namespace: postiz
spec:
  ports:
    - name: "6379"
      port: 6379
      targetPort: 6379
  selector:
    service: postiz-redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postiz-redis
  namespace: postiz
spec:
  replicas: 1
  selector:
    matchLabels:
      service: postiz-redis
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        service: postiz-redis
      annotations:
        diun.enable: "true"
    spec:
      containers:
        - name: redis
          image: redis:7.2
          livenessProbe:
            exec:
              command:
                - redis-cli ping
            failureThreshold: 3
            periodSeconds: 10
            timeoutSeconds: 3
          name: postiz-redis
          volumeMounts:
            - mountPath: /data
              name: postiz-redis-data
      restartPolicy: Always
      volumes:
        - name: postiz-redis-data
          persistentVolumeClaim:
            claimName: postiz-redis-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    service: postiz-redis-data
  name: postiz-redis-data
  namespace: postiz
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
