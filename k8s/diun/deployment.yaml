apiVersion: v1
kind: Namespace
metadata:
  name: diun
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: diun
  name: diun
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: diun
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - watch
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: diun
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: diun
subjects:
  - kind: ServiceAccount
    name: diun
    namespace: diun
---
apiVersion: v1
kind: Service
metadata:
  namespace: diun
  name: diun
spec:
  selector:
    app: diun
  ports:
    - port: 80
      protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: diun
  name: diun
spec:
  replicas: 1
  selector:
    matchLabels:
      app: diun
  template:
    metadata:
      labels:
        app: diun
      annotations:
        diun.enable: "true"
    spec:
      serviceAccountName: diun
      containers:
        - name: diun
          image: crazymax/diun:latest
          imagePullPolicy: Always
          args: ["serve"]
          env:
            - name: TZ
              value: "Europe/Paris"
            - name: LOG_LEVEL
              value: "info"
            - name: LOG_JSON
              value: "false"
            - name: DIUN_WATCH_WORKERS
              value: "20"
            - name: DIUN_WATCH_SCHEDULE
              # value: "0 */6 * * *"
              value: "* * * * *"
            - name: DIUN_WATCH_JITTER
              value: "30s"
            - name: DIUN_PROVIDERS_KUBERNETES
              value: "true"
          volumeMounts:
            - mountPath: "/data"
              name: "data"
      restartPolicy: Always
      volumes:
        # Set up a data directory for diun
        # For production usage, you should consider using PV/PVC instead(or simply using storage like NAS)
        # For more details, please see https://kubernetes.io/docs/concepts/storage/volumes/
        # - name: "data"
        #   hostPath:
        #     path: "/data"
        #     type: Directory
        - name: "data"
          persistentVolumeClaim:
            claimName: "diun-data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: diun-data
  namespace: diun
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn-backup
  resources:
    requests:
      storage: 1Gi
