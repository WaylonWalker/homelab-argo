apiVersion: v1
kind: Service
metadata:
  labels:
    service: minio
  name: minio
  namespace: minio
spec:
  ports:
    - name: "9000"
      port: 9000
      targetPort: 9000
    - name: "9001"
      port: 9001
      targetPort: 9001
  selector:
    service: minio
---
apiVersion: v1
kind: Namespace
metadata:
  name: minio
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: minio
  name: minio2
  namespace: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      service: minio
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        diun.enable: "true"
      labels:
        service: minio
    spec:
      terminationGracePeriodSeconds: 60
      containers:
        - args:
            - server
            - --console-address
            - :9001
            - --address
            - :9000
            - /data
          image: minio/minio:RELEASE.2025-04-08T15-41-24Z
          name: minio
          ports:
            - containerPort: 9000
              protocol: TCP
            - containerPort: 9001
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 20
            periodSeconds: 20
          volumeMounts:
            - mountPath: /data
              name: minio-storage
          envFrom:
            - secretRef:
                name: minio-secret
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 20
            periodSeconds: 20
      restartPolicy: Always
      volumes:
        - name: minio-storage
          persistentVolumeClaim:
            claimName: minio-storage-longhorn
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: minio-pdb
  namespace: minio
spec:
  minAvailable: 1
  selector:
    matchLabels:
      service: minio
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-storage
  namespace: minio
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ""
  resources:
    requests:
      storage: 100Mi
  volumeName: minio-pv
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: minio-pv
  namespace: minio
spec:
  capacity:
    storage: 100Mi
  storageClassName: ""
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/vault/nfs/general/pv/minio/minio-storage
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: minio-storage
              operator: In
              values:
                - "true"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-storage-longhorn
  namespace: minio
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn-backup
  resources:
    requests:
      storage: 50Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    service: minio
  name: minio
  namespace: minio
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  rules:
    - host: minio.wayl.one
      http:
        paths:
          - backend:
              service:
                name: minio
                port:
                  number: 9000
            path: /
            pathType: Prefix
    - host: minio-ui.wayl.one
      http:
        paths:
          - backend:
              service:
                name: minio
                port:
                  number: 9001
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - minio.wayl.one
        - minio-ui.wayl.one
      secretName: minio-cert-tls
