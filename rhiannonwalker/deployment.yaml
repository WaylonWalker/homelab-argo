apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: rhiannonwalker
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    service: code-server
  name: code-server
  namespace: rhiannonwalker
spec:
  ports:
    - name: "8443"
      port: 8443
      targetPort: 8443
  selector:
    service: code-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    service: code-server
  name: code-server
  namespace: rhiannonwalker
spec:
  replicas: 1
  selector:
    matchLabels:
      service: code-server
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        network/code-server-default: "true"
        service: code-server
      annotations:
        diun.enable: "true"
    spec:
      containers:
        - env:
            - name: DEFAULT_WORKSPACE
              value: /config/workspace
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rhiannonwalker-secret
                  key: PASSWORD
            - name: PGID
              value: "1000"
            - name: PROXY_DOMAIN
              value: edit.rhiannonwalker.com
            - name: PUID
              value: "1000"
            - name: SUDO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rhiannonwalker-secret
                  key: PASSWORD
            - name: TZ
              value: Etc/UTC
          image: lscr.io/linuxserver/code-server:latest
          name: code-server
          ports:
            - containerPort: 8443
              protocol: TCP
          volumeMounts:
            - mountPath: /config
              name: rhiannonwalker-config
      restartPolicy: Always
      volumes:
        - name: rhiannonwalker-config
          persistentVolumeClaim:
            claimName: rhiannonwalker-config
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  creationTimestamp: null
  labels:
    service: code-server
  name: code-server
  namespace: rhiannonwalker
spec:
  rules:
    - host: rhiannonwalker.wayl.one
      http:
        paths:
          - backend:
              service:
                name: code-server
                port:
                  number: 8443
            path: /
            pathType: Prefix
    - host: edit.rhiannonwalker.com
      http:
        paths:
          - backend:
              service:
                name: code-server
                port:
                  number: 8443
            path: /
            pathType: Prefix
---
apiVersion: v1
kind: Pod
metadata:
  name: watch
  namespace: rhiannonwalker
  annotations:
    minio-last-rotated: "Sun Mar  2 09:21:55 PM CST 2025"
spec:
  containers:
    - name: watch
      image: registry.wayl.one/rhiannonwalker-com:50
      imagePullPolicy: Always
      workingDir: /config/workspace/rhiannonwalker.com/
      # command: ["sleep", "3600"]
      volumeMounts:
        - mountPath: /config
          name: rhiannonwalker-config
      env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: rhiannonwalker-minio-secret
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: rhiannonwalker-minio-secret
              key: AWS_SECRET_ACCESS_KEY
        - name: AWS_BUCKET_NAME
          valueFrom:
            secretKeyRef:
              name: rhiannonwalker-minio-secret
              key: AWS_BUCKET_NAME
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: rhiannonwalker-minio-secret
              key: AWS_REGION
        - name: AWS_ENDPOINT_URL
          valueFrom:
            secretKeyRef:
              name: rhiannonwalker-minio-secret
              key: AWS_ENDPOINT_URL
  imagePullSecrets:
    - name: 'cluster-regcred'
  restartPolicy: Always
  volumes:
    - name: rhiannonwalker-config
      persistentVolumeClaim:
        claimName: rhiannonwalker-config
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    service: admin
  name: admin
  namespace: rhiannonwalker
spec:
  ports:
    - name: "8000"
      port: 8000
      targetPort: 8000
  selector:
    service: admin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    service: admin
  name: admin
  namespace: rhiannonwalker
spec:
  replicas: 1
  selector:
    matchLabels:
      service: admin
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        service: admin
      annotations:
        diun.enable: "true"
    spec:
      containers:
        - name: admin
          image: registry.wayl.one/rhiannonwalker-com:50
          imagePullPolicy: Always
          workingDir: /config/workspace/rhiannonwalker.com/admin/
          command: ["/app/admin/just-server"]
          volumeMounts:
            - mountPath: /config
              name: rhiannonwalker-config
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: rhiannonwalker-minio-secret
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: rhiannonwalker-minio-secret
                  key: AWS_SECRET_ACCESS_KEY
            - name: AWS_BUCKET_NAME
              valueFrom:
                secretKeyRef:
                  name: rhiannonwalker-minio-secret
                  key: AWS_BUCKET_NAME
            - name: AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: rhiannonwalker-minio-secret
                  key: AWS_REGION
            - name: AWS_ENDPOINT_URL
              valueFrom:
                secretKeyRef:
                  name: rhiannonwalker-minio-secret
                  key: AWS_ENDPOINT_URL
          ports:
            - containerPort: 8000
              protocol: TCP
          volumeMounts:
            - mountPath: /config
              name: rhiannonwalker-config
      imagePullSecrets:
        - name: 'cluster-regcred'
      restartPolicy: Always
      volumes:
        - name: rhiannonwalker-config
          persistentVolumeClaim:
            claimName: rhiannonwalker-config
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  creationTimestamp: null
  labels:
    service: admin
  name: admin
  namespace: rhiannonwalker
spec:
  rules:
    - host: admin.rhiannonwalker.com
      http:
        paths:
          - backend:
              service:
                name: admin
                port:
                  number: 8000
            path: /
            pathType: Prefix
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rhiannonwalker-config
  namespace: rhiannonwalker
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  volumeName: pv-hostpath-config
  storageClassName: hostpath
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-hostpath-config
  namespace: rhiannonwalker
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: hostpath
  hostPath:
    path: /mnt/vault/nfs/general/pv/rhiannonwalker/config
    type: DirectoryOrCreate


# FLUFFED-UP.com
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fluffed-up-walkershare
  namespace: rhiannonwalker
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  volumeName: pv-fluffed-up-walkershare
  storageClassName: hostpath
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-fluffed-up-walkershare
  namespace: rhiannonwalker
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: hostpath
  hostPath:
    path: /mnt/main/walkershare/rhiannon/fluffed-up.com
    type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: fluffed-up
  namespace: rhiannonwalker
  labels:
    app: fluffed-up
spec:
  selector:
    app: fluffed-up
  ports:
    - name: http
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fluffed-up
  namespace: rhiannonwalker
  labels:
    app: fluffed-up
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fluffed-up
  template:
    metadata:
      labels:
        app: fluffed-up
      annotations:
        diun.enable: "true"
    spec:
      containers:
        - name: nginx
          image: nginx:stable-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          volumeMounts:
            - name: webroot
              mountPath: /usr/share/nginx/html
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
          env:
            - name: TZ
              value: America/Chicago
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 3
            periodSeconds: 10
      volumes:
        - name: webroot
          persistentVolumeClaim:
            claimName: fluffed-up-walkershare
        - name: nginx-conf
          configMap:
            name: fluffed-up-nginx
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluffed-up-nginx
  namespace: rhiannonwalker
data:
  default.conf: |
    server {
      listen 80;
      server_name fluffed-up.com;

      # Gzip for text assets
      gzip on;
      gzip_types text/plain text/css application/json application/javascript application/xml+rss application/xml application/x-javascript image/svg+xml;
      gzip_min_length 512;

      root /usr/share/nginx/html;
      index index.html;

      # HTML: fast edits + CDN cache with SWR
      location ~* \.(html)$ {
        add_header Cache-Control "public, max-age=0, s-maxage=60, stale-while-revalidate=30, stale-if-error=86400" always;
        try_files $uri =404;
      }

      # Static/fingerprinted assets
      # location ~* \.(?:css|js|mjs|json|ico|png|jpe?g|gif|webp|svg|avif|woff2?)$ {
      #   add_header Cache-Control "public, max-age=31536000, s-maxage=31536000, immutable, stale-if-error=86400" always;
      #   try_files $uri =404;
      # }

      # SPA fallback (remove if not needed)
      location / {
        add_header Cache-Control "public, max-age=0, s-maxage=60, stale-while-revalidate=30, stale-if-error=86400" always;
        try_files $uri $uri/ /index.html;
      }
    }
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fluffed-up
  namespace: rhiannonwalker
  labels:
    app: fluffed-up
  annotations:
    # Uncomment if you use cert-manager:
    # cert-manager.io/cluster-issuer: letsencrypt-prod
    # Optional: speed up TTFB while editing
    # nginx.ingress.kubernetes.io/proxy-buffering: "off"
spec:
  rules:
    - host: fluffed-up.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: fluffed-up
                port:
                  number: 80
  # If you terminate TLS at the Ingress (recommended with Cloudflare "Full (strict)")
  # tls:
  #   - hosts:
  #       - fluffed-up.com
  #     secretName: fluffed-up-com-tls
